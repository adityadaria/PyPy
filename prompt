Great ideas. One of my favorites is the translating capacity. High end language with high quality output. Thank you for sharing, I'll do same. Here are some useful prompt for programmers. This is also a summary I did from Finxter, Dr. Christian Mayer
Stuttgarter Str. 106., Stuttgart Fellbach, Germany email. You can find at at https://sendy.finxter.com

Prompt 1: Explain!

Explain how the {concept or function} works in {programming language}.

Prompt 2: Syntax

What is the correct syntax for a {statement or function} in {programming language}?

Prompt 3: Bug Fixes

How do I fix the following {programming language} code? {code snippet}

Prompt 4: Best Practice

Show me best practices for writing {concept or function} in {programming language}.

Prompt 5: Optimize!

Optimize the following pYthon code" def square(numbers): result - [] for number in numbers results.append(number * number) return result

Prompt 6: “Find the bottleneck in this code block.”

Find a bottleneck in this code:

codeBlock='''function example() {

var startTime = new Date().getTime();

// ... code ...

var endTime = new Date().getTime();

return (endTime - startTime) / 1000;

}'''

Prompt 7: “Suggest ways to optimize this function.”

functionToOptimize='''function slowFunction(input) {

// ... code...

}'''

Prompt 8: “Detect memory leaks in this JavaScript code.”

codeWithMemoryLeaks='''function example() {

var leaker = [];

for (var i = 0; i &lt; 1000; i++) {

leaker.push(new Array(1000));

}

}'''

Prompt 9: API

Explain how to use the REST API for Coinbase API

Prompt 10: Fetch Data

Write a Python function to fetch data from [API endpoint].

Prompt 11: List APIs

List five popular APIs in the category of [category].

GPT Example Output:

"Five popular APIs in the category of payment processing include:

Stripe API

PayPal API

Square API

Braintree API

Authorize.Net API"

NATURAL LANGUAGE PROCESSING and MACHINE LEARNING EXAMPLES OF GPTS

Prompt 12: Tokenize

Explain how tokenization works in NLP and provide a Python example

Prompt 13: Concepts I

Explain the difference between supervised and unsupervised machine learning

Prompt 14: Concepts II

What are Overfitting and Underfitting in machine learning? How do they affect a model's performance?

Advanced Features and Capabilities

Prompt 15: Algorithm

Write an algorithm o calculate the factorial of a number / or

Generate a Python function to calculate the factorial of a number.

Prompt 16: Review Code

Prompt: Review this Python code for possible improvements: \ def slow_function(x): \ result = 0 \ for i in range(x): \ for j in range(x): \ result += i * j \ return result

Deployment and Scaling

Prompt 17: Steps to Deploy

Recommend steps to deploy a Python web application in a cloud environment.

Prompt 18: Manage Apps

How do I manage scaling for a Node.js application on a server?

Prompt 19: Concepts III

Explain the concept of horizontal and vertical scaling, and when to use each.

Custom Solutions and Applications

Prompt 20: Custom eCommerce Functions

"Create a custom function for adding items to a shopping cart in JavaScript."

Prompt 21: Design SQL Queries for DB Access

"Design a SQL query to fetch an ordered list of the latest 5 posts with user information."

Prompt 22: Parsing

"Provide a Python code snippet for parsing JSON data and printing specific values."

Industry-Specific Prompts

Prompt 23: Understanding Code Snippet

Help me understand this Python code: [code snippet]

Prompt 24: Bug Finding II

Find bugs in the following JavaScript code: [code snippet]

Prompt 25: Optimize SQL Queries

How can I optimize the following SQL query? [SQL query]

10 More Helpful Prompts

Convert the following Python code to JavaScript: {code_snippet}

Explain the purpose of the following code: {code_snippet}

Find and fix the bug in this code: {code_snippet}

What's the best practice for {coding_concept} in {programming_language}?

Write a {programming_language} function that takes an array of numbers and returns their sum.

How do I {programming_task} using the {library_or_framework} in {programming_language}?

Optimize the following code for better performance: {code_snippet}

Compare and contrast {programming_language1} and {programming_language2} in terms of {comparison_point}. Gain insights into different programming languages' relative strengths and weaknesses regarding specific aspects, such as performance, readability, or community support.

List the most common {programming_language} libraries for {application_domain}.

Write a code review for the following {programming_language} code snippet: {code_snippet}


LEARN COMPLEX THINGS.

Prompt : Transform key concepts or lessons from [topic or skill] into engaging stories or narratives to help me better remember and understand the material.”

2) FEYNMAN TECHNIQUE

Prompt : Utilize the Feynman Technique for deeper understanding : Prompt: “Explain [topic or skill] in the simplest terms possible as if teaching it to a complete beginner. Identify gaps in my understanding and suggest resources to fill them.”

3) TO KILL COMPETITION AND STAND ONLY ONE.

(Business/ content creation/ etc) Promot : Blue Ocean Strategy is a strategy framework that suggests creating new spaces or "blue oceans" rather than competing in existing spaces or "red oceans". This is done by identifying untapped customer/audience needs and creating new products or services to meet those needs. The idea is to differentiate the offering from existing competitors and create demand rather than simply competing for existing demand.

Business/topic/niche: <insert>

As a different language model, I haven't personally used ChatGPT prompts, but I can share some helpful prompt categories that tend to work well for both Bard and ChatGPT:

Creative Writing:

First line prompts: Begin with a captivating first line like "The last words she heard before the world went dark were, 'Run!'" and invite ChatGPT to continue the story.

Character prompts: Describe a unique character trait or backstory and ask ChatGPT to develop the character's motivations and actions.

Genre prompts: Specify a genre like sci-fi, fantasy, or mystery and let ChatGPT explore its possibilities through a writing prompt.

Dialogue prompts: Provide a snippet of dialogue between two characters and ask ChatGPT to continue the conversation, revealing their personalities and relationships.

Productivity and Problem-Solving:

Brainstorming prompts: Ask ChatGPT to generate a list of ideas for solving a specific problem or achieving a goal.

Research prompts: Provide a broad topic and ask ChatGPT to summarize key information or generate research questions.

Outline prompts: Give ChatGPT a general idea for a project or presentation and ask it to create a detailed outline.

Scriptwriting prompts: Describe a scene or situation and ask ChatGPT to write a script for a play, movie, or video game.

Knowledge and Learning:

Explain like I'm five prompts: Break down complex concepts into simple terms using analogies and examples.

Historical fiction prompts: Ask ChatGPT to imagine a fictional event happening in a specific historical period.

Philosophical prompts: Explore thought-provoking questions about life, the universe, and everything.

Debate prompts: Present two opposing viewpoints on an issue and ask ChatGPT to argue for both sides.
